name: 'Build Macro Deck Extension'
description: 'Build a Macro Deck Extension from source'

runs:
  using: "composite"
  
  steps:
  - name: Install XMLStarlet
    shell: bash
    run: sudo apt-get install -y xmlstarlet jq
    
  - uses: actions/checkout@v3
    with: 
      path: plugin
      
  - name: Extract Extension Info
    id: extension_info
    shell: bash
    run: |
      echo "EXT_VERSION=$(jq --raw-output '.version' ./plugin/ExtensionManifest.json)" >> $GITHUB_OUTPUT
      echo "EXT_TYPE=$(jq --raw-output '.type' ./plugin/ExtensionManifest.json)" >> $GITHUB_OUTPUT
      echo "EXT_PACKAGE_ID=$(jq --raw-output '.packageId' ./plugin/ExtensionManifest.json)" >> $GITHUB_OUTPUT
      
  - name: Validate Extension Info
    if: |
      steps.extension_info.outputs.EXT_TYPE == '' || 
      steps.extension_info.outputs.EXT_PACKAGE_ID == '' || 
      steps.extension_info.outputs.EXT_VERSION == ''
    shell: bash
    run: |
      echo "::error file=ExtensionManifest.json::Invalid manifest! Required attributes [version, type, packageId]"
      exit 1

  - name: "[Plugin] Checkout Macro Deck"
    uses: actions/checkout@v3
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    with: 
      repository: SuchByte/Macro-Deck
      ref: refs/heads/main
      path: macro-deck
      
  - name: "[Plugin] Setup .NET"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    uses: actions/setup-dotnet@v3
    with:
      dotnet-version: 6.0.x

  - name: "[Plugin] Remove Pre Build Targets"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./macro-deck
    shell: bash
    run : |
      xmlstarlet ed -P -L --delete '//Target[@Name="PreBuild"]' *.csproj
      xmlstarlet ed -P -L --delete '//Target[@Name="PostBuild"]' *.csproj

  - name: "[Plugin] Remove COM Reference"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./macro-deck
    shell: bash
    run: dotnet remove reference NetFwTypeLib

  - name: "[Plugin] Restore dependencies"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./macro-deck
    shell: bash
    run: dotnet restore -property:EnableWindowsTargeting=true

  - name: "[Plugin] Build Macro Deck"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./macro-deck
    shell: bash
    run: dotnet build --configuration Release --no-restore -property:EnableWindowsTargeting=true -property:SignAssembly=false

  - name: "[Plugin] Remove Pre Build Targets"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./plugin
    shell: bash
    run : |
      xmlstarlet ed -P -L --delete '//Target[@Name="PreBuild"]' *.csproj
      xmlstarlet ed -P -L --delete '//Target[@Name="PostBuild"]' *.csproj

  - name: "[Plugin] Move dll into location"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./macro-deck
    shell: bash
    run: |
      cp './bin/Release/netcoreapp3.1/win-x64/Macro Deck 2.dll' '../plugin/Macro Deck 2.dll'

  - name: "[Plugin] Restore dependencies"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./plugin
    shell: bash
    run: dotnet restore /p:EnableWindowsTargeting=true

  - name: "[Plugin] Build Plugin"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./plugin
    shell: bash
    run: dotnet build --configuration Release --no-restore /p:EnableWindowsTargeting=true

  - name: "[Plugin] Test"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    working-directory: ./plugin
    shell: bash
    run: dotnet test --no-build --verbosity normal

  - name: Prepare Distributable Staging Area
    shell: bash
    run: mkdir dist

  - name: "[Plugin] Stage Distributable"
    if: steps.extension_info.outputs.EXT_TYPE == 'Plugin'
    shell: bash
    run: |
      cp ./plugin/bin/Release/netcoreapp3.1/* ./dist
      cp ./plugin/ExtensionManifest.json ./dist
      cp ./plugin/ExtensionIcon.png ./dist
      cp ./plugin/README.md ./dist 2>/dev/null || true
      cp ./plugin/LICENSE ./dist 2>/dev/null || true
      
  - name: "[Icon Pack] Validate Contents"
    if: | 
      steps.extension_info.outputs.EXT_TYPE == 'IconPack' &&
      hashFiles(
        './plugin/*.apng',
        './plugin/*.avif',
        './plugin/*.gif',
        './plugin/*.jpg',
        './plugin/*.jpeg',
        './plugin/*.jfif',
        './plugin/*.pjpeg',
        './plugin/*.pjp',
        './plugin/*.png',
        './plugin/*.svg',
        './plugin/*.webp',
        './plugin/*.bmp',
        './plugin/*.ico',
        './plugin/*.cur',
        './plugin/*.tif',
        './plugin/*.tiff'
      ) == ''
    shell: bash
    run: | 
      echo "::error::No valid icons found"
      exit 1
      
  - name: "[Icon Pack] Stage Distributable"
    if: steps.extension_info.outputs.EXT_TYPE == 'IconPack'
    shell: bash
    run: |
      cp ./plugin/*.{apng,avif,gif,jpg,jpeg,jfif,pjpeg,pjp,png,svg,webp,bmp,ico,cur,tif,tiff} ./dist 2>/dev/null || true
      cp ./plugin/README.md ./dist 2>/dev/null || true
      cp ./plugin/LICENSE ./dist 2>/dev/null || true
      cp ./plugin/ExtensionManifest.json ./dist
      
  - name: Package Distributable
    shell: bash
    run: |
      cd ./dist
      zip -r ../${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}-${{ steps.extension_info.outputs.EXT_VERSION }}.zip *

  - name: Upload a Build Artifact
    uses: actions/upload-artifact@v3.1.1
    with:
      path: ./${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}-${{ steps.extension_info.outputs.EXT_VERSION }}.zip
      name: ${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}
      if-no-files-found: error

  - name: Create/Update Release
    uses: ncipollo/release-action@v1
    with:
      allowUpdates: true
      artifactErrorsFailBuild: false
      artifacts: './${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}-${{ steps.extension_info.outputs.EXT_VERSION }}.zip'
      commit: ${{ github.sha }}
      generateReleaseNotes: true
      makeLatest: true
      replacesArtifacts: true
      tag: ${{ steps.extension_info.outputs.EXT_VERSION }}
