name: 'Build Macro Deck Extension'
description: 'Build a Macro Deck Extension from source'

inputs:
  upsert-release:
    description: "['true'|'false'] Whether this action should upload the buildable to a release with the same tag name, creating one if it doesn't exist"
    required: true
    default: ''
  ext-repo:
    description: 'Same as action/checkout repository property: Repository name with owner. For example, actions/checkout'
    required: false
    default: ''
  ext-ref:
    description: "Same as action/checkout ref property: The branch, tag or SHA to checkout."
    required: false
    default: ''
    
outputs:
  artifact-name:
    description: "Artifact name to use in the download-artifact action in order to get the distributable file"
    value: ${{ steps.set-outputs.outputs.artifact-name }}
  artifact-path:
    description: "Artifact path to use int he download-artifact action in order to get the distributable file"
    value: ${{ steps.set-outputs.outputs.artifact-path }}

runs:
  using: "composite"
  
  steps:
  - name: Install Dependencies
    shell: bash
    run: sudo apt-get install -y xmlstarlet dos2unix

  - name: "Checkout Extension Repository"
    uses: actions/checkout@v3
    with: 
      repository: ${{ inputs.ext-repo }}
      ref: ${{ inputs.ext-ref }}
      path: plugin

  - name: Extract Extension Info
    id: extension_info
    shell: bash
    run: |
      delim="EOF-${RANDOM}"
      echo "manifest<<${delim}" >> $GITHUB_ENV
      cat "./plugin/ExtensionManifest.json" | dos2unix | perl -pe 'chomp if eof' >> $GITHUB_ENV
      echo -e "\n${delim}" >> $GITHUB_ENV

  - name: Validate Extension Info
    if: |
      fromJSON(env.manifest).type == '' || 
      fromJSON(env.manifest).packageId == '' || 
      fromJSON(env.manifest).version == '' ||
      fromJSON(env.manifest).target-plugin-api-version == ''
    shell: bash
    run: |
      echo "[Extension Info Values]"
      echo "Version                  : ${{ fromJSON(env.manifest).version }}"
      echo "Type                     : ${{ fromJSON(env.manifest).type }}"
      echo "Package ID               : ${{ fromJSON(env.manifest).packageId }}"
      echo "Target Plugin API Version: ${{ fromJSON(env.manifest).target-plugin-api-version }}"
      echo "::error file=ExtensionManifest.json::Invalid manifest! Required attributes [version, type, packageId, target-plugin-api-version]" && exit 1

  - name: Build Extension
    id: build_extension
    uses: Macro-Deck-App/Actions/build-extension@main
    with:
      extension-path: plugin
      artifact-name: ${{ fromJSON(env.manifest).packageId }}-${{ fromJSON(env.manifest).version }}

  - name: Create/Update Release
    if: inputs.upsert-release == 'true'
    uses: ncipollo/release-action@v1
    with:
      allowUpdates: true
      artifactErrorsFailBuild: false
      artifacts: './${{ fromJSON(env.manifest).packageId }}-${{ fromJSON(env.manifest).version }}.zip'
      commit: ${{ github.sha }}
      generateReleaseNotes: true
      makeLatest: true
      replacesArtifacts: true
      tag: ${{ fromJSON(env.manifest).version }}
